(setf *random-state* (make-random-state T))

(defun get_dice() ; функция для генерации значений игральной кости
    (list (+ (random 6) 1) (+ (random 6) 1)))

(defun is_repeat(dice)
  (let ((_first (car dice))
	(_second (car (cdr dice))))
    (cond ((or (= _first _second 1) (= _first _second 6)) t)
	  (t nil))))

(defun player_actions(who)
  (let* ((_dice (get_dice))
	 (_sum_dice (+ (car _dice) (car (cdr _dice)))))
    (print who)
    (print _dice)
    (cond ((or (= _sum_dice 7) (= _sum_dice 11)) `win)
	  ((is_repeat _dice) (player_actions))
	  (t _sum_dice))))

(defun play_dice()
  (let ((_sum_dice1 (player_actions "first")))
    (cond ((eq _sum_dice1 `win) (print "first player is winner!"))
	  (t (let ((_sum_dice2 (player_actions "second")))
	       (cond ((eq _sum_dice2 `win) (print "second player is winner!"))
		     ((< _sum_dice1 _sum_dice2) (print "second player is winner!"))
		     ((> _sum_dice1 _sum_dice2) (print "first player is winner!")
		      (t (print "draw")))))))))
function lab_02()

% x = load("sel.txt");
x = [11.89,9.60,9.29,10.06,9.50,8.93,9.58,6.81,8.69,9.62,...
     9.01,10.59,10.50,11.53,9.94,8.84,8.91,6.90,9.76,7.09,...
     11.29,11.25,10.84,10.76,7.42,8.49,10.10,8.79,11.87,8.77,...
     9.43,12.41,9.75,8.53,9.72,9.45,7.20,9.23,8.93,9.15,...
     10.19,9.57,11.09,9.97,8.81,10.73,9.57,8.53,9.21,10.08,...
     9.10,11.03,10.10,9.47,9.72,9.60,8.21,7.78,10.21,8.99,...
     9.14,8.60,9.14,10.95,9.33,9.98,9.09,10.35,8.61,9.35,...
     10.04,7.85,9.64,9.99,9.65,10.89,9.08,8.60,7.56,9.27,...
     10.33,10.09,8.51,9.86,9.24,9.63,8.67,8.85,11.57,9.85,...
     9.27,9.69,10.90,8.84,11.10,8.19,9.26,9.93,10.15,8.42,...
     9.36,9.93,9.11,9.07,7.21,8.22,9.08,8.88,8.71,9.93,...
     12.04,10.41,10.80,7.17,9.00,9.46,10.42,10.43,8.38,9.01];

N = length(x);

fprintf("\n1.a) вычисление оценок mu и S_quad " + ...
    "математического ожидания MX и дисперсии DX соответственно\n");

% точечные оценки
mu = sum(x) / N;
S_quad = sum((x - mu) .^2) / (N - 1);

fprintf("\nmu = %.4f\n", mu);
fprintf("\nS_quad = %.4f\n", S_quad);

gamma = 0.9; % доверительный интервал

% оценка mu

fprintf("\n1.б) вычисление нижней и верхней границдля " + ...
    "gamma-доверительного интервала для математического ожидания MX\n");

% tinv - функция квантилей распределения Стьюдента
quant_St = tinv((1 + gamma) / 2, N - 1); 

mu_lower = mu - (sqrt(S_quad) * quant_St / sqrt(N));
mu_upper = mu + (sqrt(S_quad) * quant_St / sqrt(N));

fprintf("\nНижняя граница gamma-доверительного " + ...
    "интервала для mu = %.4f\n", mu_lower);
fprintf("Верхняя граница gamma-доверительного " + ...
    "интервала для mu = %.4f\n", mu_upper);
fprintf("\ngamma-доверительный интервал для mu: " + ...
    "(%.4f, %.4f)\n", mu_lower, mu_upper);

% оценка S_quad

fprintf("\n1.в) вычисление нижней и верхней границ для " + ...
    "gamma-доверительного интервала для дисперсии DX\n");

% tinv - функция квантилей распределения хи-квадрат
quant_chi1 = chi2inv((1 - gamma) / 2, N - 1);
quant_chi2 = chi2inv((1 + gamma) / 2, N - 1);

sigma_lower = S_quad * (N - 1) / quant_chi2;
sigma_upper = S_quad * (N - 1) / quant_chi1;

fprintf("\nНижняя граница gamma-доверительного интервала " + ...
    "для sigma = %.4f\n", sigma_lower);
fprintf("Верхняя граница gamma-доверительного интервала " + ...
    "для sigma = %.4f\n", sigma_upper);

fprintf("\ngamma-доверительный интервал для " + ...
    "sigma: (%.4f, %.4f)\n", sigma_lower, sigma_upper);

% подготовка данных для графиков 

mu_N = zeros(N, 1) + mu;
mu_n = zeros(N, 1);
mu_lower_n = zeros(N, 1);
mu_upper_n = zeros(N, 1);

S_quad_N = zeros(N, 1) + S_quad;
S_quad_n = zeros(N, 1);
S_quad_lower_n = zeros(N, 1);
S_quad_upper_n = zeros(N, 1);

for i = 1 : N
    mu_n(i) = sum(x(1 : i)) / i;
    S_quad_n(i) = sum((x(1 : i) - mu_n(i)) .^2) / (i - 1);

    quant_st_i = tinv((1 + gamma) / 2, i - 1);

    mu_lower_n(i) = mu_n(i) - (quant_st_i * sqrt(S_quad_n(i)) / sqrt(i));
    mu_upper_n(i) = mu_n(i) + (quant_st_i * sqrt(S_quad_n(i)) / sqrt(i)); 

    quant_chi1_i = chi2inv((1 - gamma) / 2, i - 1);
    quant_chi2_i = chi2inv((1 + gamma) / 2, i - 1);
    
    S_quad_lower_n(i) = S_quad_n(i) * (i - 1) / quant_chi2_i;
    S_quad_upper_n(i) = S_quad_n(i) * (i - 1) / quant_chi1_i;
end

plot((1 : N), mu_N, 'r', 'LineWidth', 1);
hold on;
plot((1 : N), mu_n, 'g', 'LineWidth', 1);
hold on;
plot((1 : N), mu_lower_n, 'b', 'LineWidth', 1);
hold on;
plot((1 : N), mu_upper_n, 'k', 'LineWidth', 1);
hold on;

grid on;
xlabel("n");
ylabel('\mu');

legend('\mu\^(x_N)', '\mu\^(x_n)', '\mu^{-}(x_n)', '\mu_{-}(x_n)');

fprintf('\nЗадание 3.a)\n');
fprintf('График в отдельном окне\n');


% figure()


plot((1 : N), S_quad_N, 'r', 'LineWidth', 1);
hold on;
plot((1 : N), S_quad_n, 'g', 'LineWidth', 1);
hold on;
plot((1 : N), S_quad_lower_n, 'b', 'LineWidth', 1);
hold on;
plot((1 : N), S_quad_upper_n, 'k', 'LineWidth', 1);
% hold on;


grid on;
xlabel("n");
ylabel('\sigma');

legend('S^2(x_N)', 'S^2(x_n)', '\sigma^{2 -}(x_n)', '\sigma^2_{-}(x_n)');

end
